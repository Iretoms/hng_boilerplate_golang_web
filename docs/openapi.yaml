openapi: 3.1.0
info:
  title: User Management and Organization API
  description: |-
    This API provides functionalities for user management, organization management, authentication, messaging, payments, and various other services.
    It includes features like social authentication, email notifications, payment integrations with Stripe and Flutterwave, and comprehensive user and organization management.
  termsOfService: http://example.com/terms/
  contact:
    email: support@example.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://api.example.com/api/v1
tags:
  - name: payment
    description: Payment operations
paths:
  /payments:
    get:
      tags:
        - payment
      summary: List all payments
      security:
        - bearerAuth: []
      description: Retrieves a list of all payments.
      operationId: listPayments
      responses:
        '200':
          description: A list of payments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Payment'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    post:
      tags:
        - payment
      summary: Create a new payment
      security:
        - bearerAuth: []
      description: Creates a new payment record.
      operationId: createPayment
      requestBody:
        description: Payment details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewPayment'
        required: true
      responses:
        '201':
          description: Payment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /payments/{paymentId}:
    get:
      tags:
        - payment
      summary: Get payment by ID
      security:
        - bearerAuth: []
      description: Retrieves a payment by its ID.
      operationId: getPaymentById
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the payment to retrieve
      responses:
        '200':
          description: Payment details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '404':
          description: Payment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - payment
      summary: Update an existing payment
      security:
        - bearerAuth: []
      description: Updates the details of an existing payment by its ID.
      operationId: updatePayment
      parameters:
        - name: paymentId
          in: path
          required: true
          schema:
            type: integer
          description: ID of the payment to update
      requestBody:
        description: Updated payment details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdatePayment'
        required: true
      responses:
        '200':
          description: Payment updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          description: Payment not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /payments/stripe:
    post:
      tags:
        - payment
      summary: Create a new payment via Stripe
      security:
        - secretKeyAuth: []
      description: Creates a new payment record via Stripe.
      operationId: createStripePayment
      requestBody:
        description: Stripe payment details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StripePayment'
        required: true
      responses:
        '201':
          description: Stripe payment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /payments/flutterwave:
    post:
      tags:
        - payment
      summary: Create a new payment via Flutterwave
      security:
        - secretKeyAuth: []
      description: Creates a new payment record via Flutterwave.
      operationId: createFlutterwavePayment
      requestBody:
        description: Flutterwave payment details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FlutterwavePayment'
        required: true
      responses:
        '201':
          description: Flutterwave payment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /payments/lemonsqueezy:
    post:
      tags:
        - payment
      summary: Create a new payment via LemonSqueezy
      security:
        - secretKeyAuth: []
      description: Creates a new payment record via LemonSqueezy.
      operationId: createLemonSqueezyPayment
      requestBody:
        description: LemonSqueezy payment details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LemonSqueezyPayment'
        required: true
      responses:
        '201':
          description: LemonSqueezy payment created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Payment'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthError'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  schemas:
    Payment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        organization_id:
          type: integer
          example: 2
        amount:
          type: number
          format: float
          example: 50.00
        currency:
          type: string
          example: "NGN"
        provider:
          type: string
          example: "flutterwave"
        transaction_id:
          type: string
          example: "txn_01"
        provider_transaction_id:
          type: string
          example: "flu_txn_02"
        status:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
    NewPayment:
      type: object
      required:
        - user_id
        - amount
        - currency
        - payment_method
        - provider
        - transaction_id
        - provider_transaction_id
      properties:
        user_id:
          type: integer
          example: 1
        amount:
          type: number
          format: float
          example: 50.00
        currency:
          type: string
          example: "NGN"
        provider:
          type: string
          example: "flutterwave"
          enum:
            - "flutterwave"
            - "stripe"
            - "lemonsqueezy"
        transaction_id:
          type: string
          example: "txn_01"
        provider_transaction_id:
          type: string
          example: "flu_txn_02"
        status:
          type: integer
          example: 1
    UpdatePayment:
      type: object
      properties:
        status:
          type: integer
          example: 1
    StripePayment:
      type: object
      required:
        - user_id
        - amount
        - email
        - card_number
        - expiry
        - cvv
      properties:
        user_id:
          type: integer
          example: 1
        amount:
          type: number
          format: float
          example: 50.00
        email:
          type: string
          example: "example@gmail.com"
        card_number:
          type: string
          example: "5678 8992 9900 9292"
        expiry:
          type: string
          example: "10/27"
        cvv:
          type: integer
          example: 672
        description:
          type: string
          example: "Payment for service X"
    FlutterwavePayment:
      type: object
      required:
        - user_id
        - amount
        - email
        - currency
      properties:
        user_id:
          type: integer
          example: 1
        amount:
          type: number
          format: float
          example: 50.00
        email:
          type: string
          example: "example@gmail.com"
        currency:
          type: string
          example: "NGN"
        description:
          type: string
          example: "Payment for service Y"
    LemonSqueezyPayment:
      type: object
      required:
        - user_id
        - email
        - amount
        - currency
      properties:
        user_id:
          type: integer
          example: 1
        amount:
          type: number
          format: float
          example: 50.00
        email:
          type: string
          example: "example@gmail.com"
        currency:
          type: string
          example: "NGN"
        description:
          type: string
          example: "Payment for service Z"
    SuccessMsg:
      type: object
      properties:
        status:
          type: string
          example: "success"
        message:
          type: string
        statusCode:
          type: integer
          example: 200
    Error:
      type: object
      properties:
        status:
          type: string
          example: "Bad Request"
        message:
          type: string
        statusCode:
          type: integer
          example: 400
    AuthError:
      type: object
      properties:
        code:
          type: integer
          example: 401
        message:
          type: string
          example: "Invalid authentication token"
    ValidationError:
      type: object
      properties:
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
                example: "amount"
              message:
                type: string
                example: "required validation failed"
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    secretKeyAuth:
      type: apiKey
      in: header
      name: Authorization
